name: Build LionCPP

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            qt-version: '6.7.0'
            build-dir: build
            generator: "Ninja"
            artifact-name: LionCPP-Linux
            qt-modules: "qtbase qttools qtsvg"
            qt-arch: ""
            setup-script: |
              sudo apt-get update
              sudo apt-get install -y build-essential cmake ninja-build
          - os: windows-latest
            qt-version: '6.6.3'  # 改用更稳定的Windows版本
            build-dir: build
            generator: "Ninja"
            artifact-name: LionCPP-Windows
            qt-modules: "qtbase qttools qtsvg"
            qt-arch: "win64_msvc2022_64"
            setup-script: |
              choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
              choco install ninja
              refreshenv
          - os: macos-latest
            qt-version: '6.7.0'
            build-dir: build
            generator: "Ninja"
            artifact-name: LionCPP-macOS
            qt-modules: "qtbase qttools qtsvg"
            qt-arch: ""
            setup-script: |
              brew install cmake ninja

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ matrix.qt-version }}
        host: ${{ startsWith(matrix.os, 'windows') && 'windows' || startsWith(matrix.os, 'macos') && 'mac' || 'linux' }}
        target: desktop
        arch: ${{ matrix.qt-arch }}
        modules: ${{ matrix.qt-modules }}
        # 添加详细日志和重试机制
        loglevel: info
        timeout: 30

    - name: Verify Qt installation
      run: |
        echo "QT_PATH: $QT_PATH"
        ls -la "$QT_PATH"
        if [ -f "$QT_PATH/bin/qmake" ]; then
          "$QT_PATH/bin/qmake" -v
        fi

    - name: Set up build environment
      run: ${{ matrix.setup-script }}

    - name: Configure CMake
      shell: bash
      run: |
        mkdir -p ${{ matrix.build-dir }}
        cd ${{ matrix.build-dir }}
        cmake .. \
          -G "${{ matrix.generator }}" \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_PREFIX_PATH="${{ env.QT_PATH }}"

    - name: Build
      shell: bash
      run: |
        cd ${{ matrix.build-dir }}
        cmake --build . --config Release --parallel $(nproc)

    - name: Package (Linux)
      if: runner.os == 'Linux'
      run: |
        mkdir -p package/LionCPP
        cp -r ${{ matrix.build-dir }}/LionCPP package/LionCPP/
        tar -czf ${{ matrix.artifact-name }}.tar.gz -C package .

    - name: Package (Windows)
      if: runner.os == 'Windows'
      run: |
        mkdir -p package/LionCPP
        cp -r ${{ matrix.build-dir }}/Release/LionCPP.exe package/LionCPP/
        7z a ${{ matrix.artifact-name }}.zip ./package/*

    - name: Package (macOS)
      if: runner.os == 'macOS'
      run: |
        mkdir -p package/LionCPP.app/Contents/MacOS
        cp ${{ matrix.build-dir }}/LionCPP package/LionCPP.app/Contents/MacOS/
        hdiutil create -volname "LionCPP" -srcfolder package -ov -format UDZO ${{ matrix.artifact-name }}.dmg

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: ${{ matrix.artifact-name }}.*
        if-no-files-found: error
