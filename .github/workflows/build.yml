name: Build LionCPP

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          # Ubuntu配置
          - os: ubuntu-latest
            qt_version: '6.7.0'
            build_dir: build
            generator: "Ninja"
            artifact_name: LionCPP-Linux
            qt_modules: "qtbase"
            qt_arch: "gcc_64"
          
          # Windows配置  
          - os: windows-latest
            qt_version: '6.7.0'
            build_dir: build
            generator: "Ninja"
            artifact_name: LionCPP-Windows
            qt_modules: "qtbase"
            qt_arch: "win64_msvc2022_64"
          
          # macOS配置
          - os: macos-latest
            qt_version: '6.7.0'
            build_dir: build
            generator: "Ninja"
            artifact_name: LionCPP-macOS
            qt_modules: "qtbase"
            qt_arch: "clang_64"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install build tools (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build libgl1-mesa-dev

    - name: Install build tools (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
        choco install ninja
        refreshenv

    - name: Install build tools (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake ninja

    - name: Install aqtinstall
      run: |
        python -m pip install --upgrade pip
        python -m pip install aqtinstall==3.1.21

    - name: Set up Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ matrix.qt_version }}
        host: ${{ matrix.os == 'windows-latest' && 'windows' || matrix.os == 'macos-latest' && 'mac' || 'linux' }}
        target: desktop
        arch: ${{ matrix.qt_arch }}
        modules: ${{ matrix.qt_modules }}
        loglevel: debug

    - name: Verify Qt installation
      run: |
        echo "QT_PATH: $QT_PATH"
        if [ -d "$QT_PATH" ]; then
          ls -la "$QT_PATH"
          if [ -f "$QT_PATH/bin/qmake" ]; then
            "$QT_PATH/bin/qmake" -v
          else
            echo "::error::qmake not found in QT_PATH"
            exit 1
          fi
        else
          echo "::error::QT_PATH directory does not exist"
          exit 1
        fi

    - name: Configure CMake
      shell: bash
      run: |
        mkdir -p ${{ matrix.build_dir }}
        cd ${{ matrix.build_dir }}
        cmake .. \
          -G "${{ matrix.generator }}" \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_PREFIX_PATH="$QT_PATH"

    - name: Build
      shell: bash
      run: |
        cd ${{ matrix.build_dir }}
        cmake --build . --config Release --parallel $(nproc)

    - name: Package (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        mkdir -p package/LionCPP
        cp -r ${{ matrix.build_dir }}/LionCPP package/LionCPP/
        tar -czf ${{ matrix.artifact_name }}.tar.gz -C package .

    - name: Package (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir -p package/LionCPP
        cp -r ${{ matrix.build_dir }}/Release/LionCPP.exe package/LionCPP/
        7z a ${{ matrix.artifact_name }}.zip ./package/*

    - name: Package (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        mkdir -p package/LionCPP.app/Contents/MacOS
        cp ${{ matrix.build_dir }}/LionCPP package/LionCPP.app/Contents/MacOS/
        hdiutil create -volname "LionCPP" -srcfolder package -ov -format UDZO ${{ matrix.artifact_name }}.dmg

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_name }}.*
        if-no-files-found: error
