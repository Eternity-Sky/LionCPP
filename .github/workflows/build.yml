name: Build and Package LionCPP

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            qt_version: '6.6.3'
            arch: "gcc_64"
            setup_script: |
              sudo apt-get update
              sudo apt-get install -y build-essential cmake ninja-build libgl1-mesa-dev patchelf
            packaging_script: |
              mkdir -p package/usr/{bin,lib}
              cp build/LionCPP package/usr/bin/
              
              # 复制Qt依赖库
              ldd build/LionCPP | grep "=> /" | awk '{print $3}' | xargs -I '{}' cp -v '{}' package/usr/lib/
              
              # 创建AppDir结构
              mkdir -p package/usr/share/{applications,icons/hicolor/256x256/apps}
              cat > package/usr/share/applications/LionCPP.desktop <<EOF
              [Desktop Entry]
              Name=LionCPP
              Exec=LionCPP
              Icon=LionCPP
              Type=Application
              Categories=Utility;
              EOF
              
              # 生成AppImage
              wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
              chmod +x appimagetool-x86_64.AppImage
              ./appimagetool-x86_64.AppImage package LionCPP-${{ github.run_number }}.AppImage

          - os: windows-latest
            qt_version: '6.6.3'
            arch: "win64_msvc2022_64"
            setup_script: |
              choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
              choco install ninja
              refreshenv
            packaging_script: |
              mkdir -p package
              cp build/Release/LionCPP.exe package/
              
              # 使用windeployqt收集依赖
              $HOME/Qt/${{ matrix.qt_version }}/${{ matrix.arch }}/bin/windeployqt.exe \
                --no-compiler-runtime \
                --no-translations \
                --no-angle \
                package/LionCPP.exe
              
              # 创建ZIP包
              7z a LionCPP-Windows-${{ github.run_number }}.zip ./package/*

          - os: macos-latest
            qt_version: '6.6.3'
            arch: "clang_arm64"
            setup_script: |
              brew install cmake ninja
            packaging_script: |
              mkdir -p package/LionCPP.app/Contents/{MacOS,Resources,Frameworks}
              cp build/LionCPP package/LionCPP.app/Contents/MacOS/
              
              # 生成Info.plist
              cat > package/LionCPP.app/Contents/Info.plist <<EOF
              <?xml version="1.0" encoding="UTF-8"?>
              <plist version="1.0">
              <dict>
                  <key>CFBundleExecutable</key>
                  <string>LionCPP</string>
                  <key>CFBundleIdentifier</key>
                  <string>com.yourcompany.LionCPP</string>
                  <key>CFBundleVersion</key>
                  <string>1.0</string>
                  <key>CFBundleShortVersionString</key>
                  <string>1.0</string>
                  <key>NSHighResolutionCapable</key>
                  <true/>
              </dict>
              </plist>
              EOF
              
              # 使用macdeployqt处理依赖
              $HOME/Qt/${{ matrix.qt_version }}/${{ matrix.arch }}/bin/macdeployqt \
                package/LionCPP.app \
                -always-overwrite \
                -verbose=3
              
              # 创建DMG镜像
              hdiutil create \
                -volname "LionCPP" \
                -srcfolder package \
                -ov \
                -format UDZO \
                LionCPP-macOS-${{ github.run_number }}.dmg

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install build tools
      run: ${{ matrix.setup_script }}

    - name: Install Qt
      run: |
        python -m pip install aqtinstall
        python -m aqt install-qt \
          ${{ matrix.os == 'windows-latest' && 'windows' || matrix.os == 'macos-latest' && 'mac' || 'linux' }} \
          desktop \
          ${{ matrix.qt_version }} \
          ${{ matrix.arch }} \
          --outputdir "$HOME/Qt"

    - name: Configure CMake
      shell: bash
      run: |
        mkdir -p build
        cd build
        cmake .. \
          -G "Ninja" \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_PREFIX_PATH="$HOME/Qt/${{ matrix.qt_version }}/${{ matrix.arch }}"

    - name: Build
      shell: bash
      run: |
        cd build
        cmake --build . --config Release --parallel $(nproc)

    - name: Package application
      run: ${{ matrix.packaging_script }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-Package
        path: |
          *.AppImage
          *.zip
          *.dmg
        if-no-files-found: error
