name: Build and Package LionCPP

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          # Ubuntu配置
          - os: ubuntu-latest
            qt_version: '6.6.3'
            qt_arch: "gcc_64"
            generator: "Ninja"
            artifact_name: "LionCPP-Linux"
          
          # Windows配置  
          - os: windows-latest
            qt_version: '6.6.3'
            qt_arch: "win64_msvc2022_64"
            generator: "Ninja"
            artifact_name: "LionCPP-Windows"
          
          # macOS配置
          - os: macos-latest
            qt_version: '6.6.3'
            qt_arch: "clang_arm64"
            generator: "Ninja"
            artifact_name: "LionCPP-macOS"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install build tools (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          libgl1-mesa-dev \
          patchelf

    - name: Install build tools (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
        choco install ninja
        refreshenv

    - name: Install build tools (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake ninja

    - name: Install Qt
      run: |
        python -m pip install aqtinstall
        python -m aqt install-qt \
          ${{ matrix.os == 'windows-latest' && 'windows' || matrix.os == 'macos-latest' && 'mac' || 'linux' }} \
          desktop \
          ${{ matrix.qt_version }} \
          ${{ matrix.qt_arch }} \
          --outputdir "$HOME/Qt"

    - name: Configure CMake
      shell: bash
      run: |
        mkdir -p build
        cd build
        cmake .. \
          -G "${{ matrix.generator }}" \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_PREFIX_PATH="$HOME/Qt/${{ matrix.qt_version }}/${{ matrix.qt_arch }}"

    - name: Build
      shell: bash
      run: |
        cd build
        cmake --build . --config Release --parallel $(nproc)

    - name: Package (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        mkdir -p package/usr/bin
        cp build/LionCPP package/usr/bin/
        
        # 获取所有依赖库
        ldd build/LionCPP | grep "=> /" | awk '{print $3}' | xargs -I '{}' cp -v '{}' package/usr/lib/
        
        # 创建AppImage
        wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
        chmod +x appimagetool-x86_64.AppImage
        ./appimagetool-x86_64.AppImage package ${{ matrix.artifact_name }}.AppImage

    - name: Package (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir -p package
        cp build/Release/LionCPP.exe package/
        
        # 使用windeployqt收集依赖
        "$HOME/Qt/${{ matrix.qt_version }}/${{ matrix.qt_arch }}/bin/windeployqt.exe" \
          --no-compiler-runtime \
          package/LionCPP.exe
        
        # 创建ZIP包
        7z a ${{ matrix.artifact_name }}.zip ./package/*

    - name: Package (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        mkdir -p package/LionCPP.app/Contents/MacOS
        cp build/LionCPP package/LionCPP.app/Contents/MacOS/
        
        # 使用macdeployqt处理依赖
        "$HOME/Qt/${{ matrix.qt_version }}/${{ matrix.qt_arch }}/bin/macdeployqt" \
          package/LionCPP.app \
          -always-overwrite
        
        # 创建DMG
        hdiutil create \
          -volname "LionCPP" \
          -srcfolder package \
          -ov \
          -format UDZO \
          ${{ matrix.artifact_name }}.dmg

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_name }}.*
        if-no-files-found: error
