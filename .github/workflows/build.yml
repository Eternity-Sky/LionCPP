name: Build LionCPP

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest  # 先专注解决Linux问题
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install build tools
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          libgl1-mesa-dev \
          libxkbcommon-dev \
          libdbus-1-dev

    - name: Install aqtinstall with retry
      run: |
        python -m pip install --upgrade pip
        python -m pip install --retries 3 aqtinstall==3.1.21

    - name: Debug Qt metadata
      run: |
        echo "=== 列出所有可用的Qt版本 ==="
        python -m aqt list-qt linux desktop
        
        echo "=== 列出6.6.3的可用架构 ==="
        python -m aqt list-qt linux desktop --arch 6.6.3
        
        echo "=== 列出gcc_64架构的可用模块 ==="
        python -m aqt list-qt linux desktop --modules 6.6.3 gcc_64 || echo "模块查询失败"

    - name: Install Qt (强制使用完整安装)
      run: |
        # 跳过模块指定，安装全部组件
        python -m aqt install-qt \
          linux \
          desktop \
          6.6.3 \
          gcc_64 \
          --outputdir "$HOME/Qt" \
          --autodesktop

    - name: Verify Qt installation
      run: |
        QT_ROOT="$HOME/Qt/6.6.3/gcc_64"
        echo "QT_PATH=${QT_ROOT}" >> $GITHUB_ENV
        
        if [ -f "$QT_ROOT/bin/qmake" ]; then
          echo "Qt安装验证成功:"
          "$QT_ROOT/bin/qmake" -v
          echo "已安装的Qt模块:"
          ls "$QT_ROOT/lib/cmake" | grep Qt
        else
          echo "::error::Qt安装失败!"
          echo "目录内容:"
          ls -la "$QT_ROOT" || true
          exit 1
        fi

    - name: Configure CMake
      shell: bash
      run: |
        mkdir -p build
        cd build
        cmake .. \
          -G "Ninja" \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_PREFIX_PATH="$QT_PATH"

    - name: Build
      shell: bash
      run: |
        cd build
        cmake --build . --config Release --parallel $(nproc)
