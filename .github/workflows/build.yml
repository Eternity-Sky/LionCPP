name: CMake Build and Package

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: Release
  INSTALL_PREFIX: ${{ github.workspace }}/install

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        qt_config:
          - version: '6.6.3'
            arch: 
              ubuntu-latest: "gcc_64"
              windows-latest: "win64_msvc2022_64"
              macos-latest: "clang_arm64"
            modules: "qtbase qttools"
        include:
          - os: ubuntu-latest
            generator: "Ninja"
            artifact_name: "MyProject-Linux"
            packaging_script: |
              mkdir -p package/usr/{bin,lib}
              cmake --install build --prefix package/usr
              ldd package/usr/bin/MyProject | grep "=> /" | awk '{print $3}' | xargs -I '{}' cp -v '{}' package/usr/lib/
              wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
              chmod +x appimagetool-x86_64.AppImage
              ./appimagetool-x86_64.AppImage package MyProject-${{ github.run_number }}-Linux.AppImage

          - os: windows-latest
            generator: "Ninja"
            artifact_name: "MyProject-Windows"
            packaging_script: |
              cmake --install build --prefix package
              $HOME/Qt/6.6.3/win64_msvc2022_64/bin/windeployqt.exe package/bin/MyProject.exe
              7z a MyProject-${{ github.run_number }}-Windows.zip ./package/*

          - os: macos-latest
            generator: "Ninja"
            artifact_name: "MyProject-macOS"
            packaging_script: |
              mkdir -p package/MyProject.app/Contents/{MacOS,Resources}
              cmake --install build --prefix package/MyProject.app/Contents/MacOS
              $HOME/Qt/6.6.3/clang_arm64/bin/macdeployqt package/MyProject.app
              hdiutil create -volname "MyProject" -srcfolder package -ov -format UDZO MyProject-${{ github.run_number }}-macOS.dmg

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup build environment
      run: |
        case ${{ runner.os }} in
          Linux)
            sudo apt-get update && sudo apt-get install -y build-essential cmake ninja-build libgl1-mesa-dev
            ;;
          Windows)
            choco install cmake ninja --no-progress
            ;;
          macOS)
            brew install cmake ninja
            ;;
        esac

    - name: Install Qt
      run: |
        python -m pip install aqtinstall==3.1.21
        python -m aqt install-qt \
          ${{ runner.os == 'Windows' && 'windows' || runner.os == 'macOS' && 'mac' || 'linux' }} \
          desktop \
          ${{ matrix.qt_config.version }} \
          ${{ matrix.qt_config.arch[matrix.os] }} \
          --outputdir "$HOME/Qt" \
          --modules ${{ matrix.qt_config.modules }}

    - name: Configure CMake
      shell: bash
      run: |
        cmake -B build \
          -G "${{ matrix.generator }}" \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_PREFIX_PATH="$HOME/Qt/${{ matrix.qt_config.version }}/${{ matrix.qt_config.arch[matrix.os] }}" \
          -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_PREFIX }}

    - name: Build project
      run: cmake --build build --config ${{ env.BUILD_TYPE }} --parallel $(nproc)

    - name: Run tests
      run: ctest --test-dir build --output-on-failure

    - name: Package application
      run: ${{ matrix.packaging_script }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          MyProject-*-Linux.AppImage
          MyProject-*-Windows.zip
          MyProject-*-macOS.dmg
        if-no-files-found: error
