name: Build LionCPP

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            qt_version: '6.7.0'
            build_dir: build
            generator: "Ninja"
            artifact_name: LionCPP-Linux
            qt_arch: "gcc_64"
            setup_script: |
              sudo apt-get update
              sudo apt-get install -y build-essential cmake ninja-build libgl1-mesa-dev
          
          - os: windows-latest
            qt_version: '6.7.0'
            build_dir: build
            generator: "Ninja"
            artifact_name: LionCPP-Windows
            qt_arch: "win64_msvc2022_64"
            setup_script: |
              choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
              choco install ninja
              refreshenv
          
          - os: macos-latest
            qt_version: '6.7.0'
            build_dir: build
            generator: "Ninja"
            artifact_name: LionCPP-macOS
            qt_arch: "clang_64"
            setup_script: |
              brew install cmake ninja

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install build tools
      run: ${{ matrix.setup_script }}

    - name: Install aqtinstall with dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install wheel py7zr
        python -m pip install aqtinstall==3.1.21

    - name: Debug Qt availability
      run: |
        echo "=== Available Qt versions ==="
        python -m aqt list-qt linux desktop --versions
        
        echo "=== Available architectures for 6.7.0 ==="
        python -m aqt list-qt linux desktop --arch 6.7.0
        
        echo "=== Available modules ==="
        python -m aqt list-qt linux desktop --modules 6.7.0 ${{ matrix.qt_arch }} || echo "Module listing failed"

    - name: Install Qt (自动模块检测)
      run: |
        # 先尝试安装基础模块
        if ! python -m aqt install-qt \
          ${{ matrix.os == 'windows-latest' && 'windows' || matrix.os == 'macos-latest' && 'mac' || 'linux' }} \
          desktop \
          ${{ matrix.qt_version }} \
          ${{ matrix.qt_arch }} \
          --outputdir "$HOME/Qt" \
          --modules qtbase; then
          
          echo "::warning::Fallback to full installation"
          # 如果失败则安装全部组件
          python -m aqt install-qt \
            ${{ matrix.os == 'windows-latest' && 'windows' || matrix.os == 'macos-latest' && 'mac' || 'linux' }} \
            desktop \
            ${{ matrix.qt_version }} \
            ${{ matrix.qt_arch }} \
            --outputdir "$HOME/Qt"
        fi

    - name: Set QT_PATH
      run: |
        QT_ROOT="$HOME/Qt/${{ matrix.qt_version }}/${{ matrix.qt_arch }}"
        echo "QT_PATH=${QT_ROOT}" >> $GITHUB_ENV
        echo "::notice::Qt installed at ${QT_ROOT}"

    - name: Verify Qt installation
      run: |
        echo "QT_PATH: $QT_PATH"
        if [ -d "$QT_PATH" ]; then
          ls -la "$QT_PATH/bin"
          if [ -f "$QT_PATH/bin/qmake" ]; then
            "$QT_PATH/bin/qmake" -v
          else
            echo "::error::qmake not found!"
            exit 1
          fi
        else
          echo "::error::Qt installation directory missing!"
          exit 1
        fi

    # 以下是构建步骤...
    - name: Configure CMake
      shell: bash
      run: |
        mkdir -p ${{ matrix.build_dir }}
        cd ${{ matrix.build_dir }}
        cmake .. \
          -G "${{ matrix.generator }}" \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_PREFIX_PATH="$QT_PATH"

    - name: Build
      shell: bash
      run: |
        cd ${{ matrix.build_dir }}
        cmake --build . --config Release --parallel $(nproc)

    # 打包和上传步骤保持不变...
