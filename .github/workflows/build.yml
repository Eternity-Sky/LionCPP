name: Build LionCPP

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            qt-version: '6.7.0'
            build-dir: build
            generator: "Ninja"
            artifact-name: LionCPP-Linux
            qt-modules: "qtbase qttools qtsvg"
            qt-arch: "gcc_64"  # Linux必须指定架构
            setup-script: |
              sudo apt-get update
              sudo apt-get install -y build-essential cmake ninja-build libgl1-mesa-dev
          - os: windows-latest
            qt-version: '6.7.0'
            build-dir: build
            generator: "Ninja"
            artifact-name: LionCPP-Windows
            qt-modules: "qtbase qttools qtsvg"
            qt-arch: "win64_msvc2022_64"
            setup-script: |
              choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
              choco install ninja
              refreshenv
          - os: macos-latest
            qt-version: '6.7.0'
            build-dir: build
            generator: "Ninja"
            artifact-name: LionCPP-macOS
            qt-modules: "qtbase qttools qtsvg"
            qt-arch: "clang_64"  # macOS需要指定架构
            setup-script: |
              brew install cmake ninja

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: List available Qt modules (Debug)
      run: |
        python -m aqt list-qt ${{ startsWith(matrix.os, 'windows') && 'windows' || startsWith(matrix.os, 'macos') && 'mac' || 'linux' }} desktop --modules ${{ matrix.qt-version }} ${{ matrix.qt-arch }}

    - name: Set up Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ matrix.qt-version }}
        host: ${{ startsWith(matrix.os, 'windows') && 'windows' || startsWith(matrix.os, 'macos') && 'mac' || 'linux' }}
        target: desktop
        arch: ${{ matrix.qt-arch }}  # 关键修复：必须指定架构
        modules: ${{ matrix.qt-modules }}
        loglevel: debug  # 获取详细日志

    - name: Verify Qt installation
      run: |
        echo "QT_PATH: $QT_PATH"
        ls -la "$QT_PATH"
        if [ -f "$QT_PATH/bin/qmake" ]; then
          "$QT_PATH/bin/qmake" -v
        fi

    # 其余步骤保持不变...
    - name: Set up build environment
      run: ${{ matrix.setup-script }}

    - name: Configure CMake
      shell: bash
      run: |
        mkdir -p ${{ matrix.build-dir }}
        cd ${{ matrix.build-dir }}
        cmake .. \
          -G "${{ matrix.generator }}" \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_PREFIX_PATH="${{ env.QT_PATH }}"

    # ...其他步骤参考之前的配置
