name: Build LionCPP

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            qt-version: '6.7.0'
            build-dir: build
            generator: "Ninja"
            artifact-name: LionCPP-Linux
            qt-modules: "qtbase"  # 最小模块集
            qt-arch: "gcc_64"
            setup-script: |
              sudo apt-get update
              sudo apt-get install -y build-essential cmake ninja-build libgl1-mesa-dev
            debug-command: |
              python -m aqt list-qt linux desktop --modules ${{ matrix.qt-version }} ${{ matrix.qt-arch }} || echo "Listing failed"
          - os: windows-latest
            qt-version: '6.7.0'
            build-dir: build
            generator: "Ninja"
            artifact-name: LionCPP-Windows
            qt-modules: "qtbase"
            qt-arch: "win64_msvc2022_64"
            setup-script: |
              choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
              choco install ninja
              refreshenv
            debug-command: |
              python -m aqt list-qt windows desktop --modules ${{ matrix.qt-version }} ${{ matrix.qt-arch }} || echo "Listing failed"
          - os: macos-latest
            qt-version: '6.7.0'
            build-dir: build
            generator: "Ninja"
            artifact-name: LionCPP-macOS
            qt-modules: "qtbase"
            qt-arch: "clang_64"
            setup-script: |
              brew install cmake ninja
            debug-command: |
              python -m aqt list-qt mac desktop --modules ${{ matrix.qt-version }} ${{ matrix.qt-arch }} || echo "Listing failed"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install build tools
      run: ${{ matrix.setup-script }}

    - name: Pre-install aqtinstall
      run: |
        python -m pip install --upgrade pip
        python -m pip install wheel py7zr
        python -m pip install aqtinstall==3.1.21

    - name: Debug Qt availability
      run: ${{ matrix.debug-command }}

    - name: Set up Qt (自动回退机制)
      id: qt_install
      continue-on-error: true
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ matrix.qt-version }}
        host: ${{ startsWith(matrix.os, 'windows') && 'windows' || startsWith(matrix.os, 'macos') && 'mac' || 'linux' }}
        target: desktop
        arch: ${{ matrix.qt-arch }}
        modules: ${{ matrix.qt-modules }}
        loglevel: debug

    - name: Fallback Qt installation (手动安装)
      if: steps.qt_install.outcome == 'failure'
      run: |
        echo "::warning::Fallback to manual Qt installation"
        python -m aqt install-qt \
          ${{ startsWith(matrix.os, 'windows') && 'windows' || startsWith(matrix.os, 'macos') && 'mac' || 'linux' }} \
          desktop \
          ${{ matrix.qt-version }} \
          ${{ matrix.qt-arch }} \
          --outputdir "${{ env.QT_PATH }}" \
          --modules ${{ matrix.qt-modules }}

    - name: Verify Qt installation
      run: |
        echo "QT_PATH: $QT_PATH"
        if [ -d "$QT_PATH" ]; then
          ls -la "$QT_PATH"
          if [ -f "$QT_PATH/bin/qmake" ]; then
            "$QT_PATH/bin/qmake" -v
          else
            echo "::error::qmake not found in QT_PATH"
            exit 1
          fi
        else
          echo "::error::QT_PATH directory does not exist"
          exit 1
        fi

    - name: Configure CMake
      shell: bash
      run: |
        mkdir -p ${{ matrix.build-dir }}
        cd ${{ matrix.build-dir }}
        cmake .. \
          -G "${{ matrix.generator }}" \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_PREFIX_PATH="${{ env.QT_PATH }}"

    - name: Build
      shell: bash
      run: |
        cd ${{ matrix.build-dir }}
        cmake --build . --config Release --parallel $(nproc)

    # 打包和上传步骤保持不变...
    - name: Package (Linux)
      if: runner.os == 'Linux'
      run: |
        mkdir -p package/LionCPP
        cp -r ${{ matrix.build-dir }}/LionCPP package/LionCPP/
        tar -czf ${{ matrix.artifact-name }}.tar.gz -C package .

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: ${{ matrix.artifact-name }}.*
        if-no-files-found: error
